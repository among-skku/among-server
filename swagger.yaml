swagger: '2.0'
info:
  description: >-
    이 서버는 성균관대학교 2017년 봄학기 종합설계프로젝트 컴퓨터공학과    
    전용반 6조의 팀 프로젝트에서 사용되는 서버이다. 이 프로젝트는 대학생    
    팀프로젝트 협업 툴에 관련되어 있다.
    
  version: 1.0.0
  title: Among
  termsOfService: 'http://among.iptime.org/'
  contact:
    email: hg9587@skku.edu
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: petstore.swagger.io
basePath: /v2
tags:
  - name: user
    description: '회원가입, 회원탈퇴, 로그인, 로그아웃 등 유저와 관련된 항목들'
  - name: team
    description: '프로젝트 팀 생성, 삭제, 참여 등과 같은 프로젝트 팀과 관련된 항목들'
schemes:
  - http
paths:
  /user/login:
    get:
      tags:
        - user
      summary: 유저를 로그인 시킨다.
      description: ''
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          description: 로그인할 유저 이름
          required: true
          type: string
        - name: password
          in: query
          description: 해당 유저의 패스워드
          required: true
          type: string
      responses:
        '200':
          description: 정상적으로 로그인 됨
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: 잘못된 유저이름이나 패스워드가 주어진 경우
  /user/logout:
    get:
      tags:
        - user
      summary: 현재 로그인된 유저를 로그아웃 처리함
      description: ''
      operationId: logoutUser
      produces:
        - application/json
      parameters: []
      responses:
        default:
          description: 정상적으로 로그아웃 됨
  /user/signup:
    put:
      tags:
        - user
      summary: 회원가입을 함
      description: ''
      operationId: signupUser
      produces:
        - application/json
      parameters:
        - name: userdata
          in: body
          description: 회원가입할 유저 정보
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: 정상적으로 회원가입 됨
        '400':
          description: 필수 입력값이 부족한 경우
  '/user/{username}':
    get:
      tags:
        - user
      summary: 해당 유저이름을 가진 유저의 정보를 불러옴
      description: ''
      operationId: getUserByName
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: '정보를 가져올 유저 이름값'
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: 잘못된 형식의 유저 이름
        '404':
          description: 유저가 발견되지 않음
    post:
      tags:
        - user
      summary: 유저의 정보를 변경한다
      description: 해당 유저의 정보를 변경한다
      operationId: updateUser
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: 정보를 변경할 유저의 이름
          required: true
          type: string
        - in: body
          name: body
          description: 유저 정보를 가진 JSON 데이터
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: 허용되지 않는 값이 들어있음
        '404':
          description: 유저가 발견되지 않음
    delete:
      tags:
        - user
      summary: 유저 정보를 삭제한다
      description: 로그인 된 유저에게만 적용할 수 있다.
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: username
          in: path
          description: 삭제할 유저의 정보
          required: true
          type: string
      responses:
        '400':
          description: 잘못된 형식의 유저 이름이 전송됨
        '404':
          description: 유저가 발견되지 않음
  '/team/{teamName}':
    get:
      tags:
        - team
      summary: 팀 정보를 불러옴
      description: ''
      operationId: getTeamData
      produces:
        - application/json
      parameters:
        - name: teamName
          in: path
          description: 불러올 프로젝트 팀의 이름
          required: true
          type: string
      responses:
        '200':
          description: 정상적으로 프로젝트 팀 데이터를 불러옴
          schema:
            $ref: '#/definitions/Team'
        '404':
          description: 존재하지 않는 팀 이름일 경우
    put:
      tags:
        - team
      summary: 새로운 팀을 생성함
      description: ''
      operationId: createTeam
      produces:
        - application/json
      parameters:
        - name: teamName
          in: query
          description: 새로 생성할 팀의 이름
          required: true
          type: string
      responses:
        '200':
          description: 정상적으로 팀이 생성 됨
        '400':
          description: 팀 생성 실패
        '403':
          description: 이미 존재하는 팀 이름
    post:
      tags:
        - team
      summary: 팀 정보를 수정
      description: ''
      operationId: updateTeam
      produces:
        - application/json
      parameters:
        - name: teamData
          in: body
          description: 정보를 수정할 팀의 이름
          required: true
          schema:
            $ref: '#/definitions/Team'
      responses:
        '200':
          description: 정상적으로 팀 정보가 수정 됨
    delete:
      tags:
        - team
      summary: 팀을 삭제
      description: ''
      operationId: deleteTeam
      produces:
        - application/json
      parameters:
        - name: teamName
          in: query
          description: 삭제할 팀 이름
          required: true
          type: string
      responses:
        '200':
          description: 정상적으로 팀이 삭제됨
        '400':
          description: 팀 삭제 실패
        '404':
          description: 존재하지 않는 팀
      
securityDefinitions:
  petstore_auth:
    type: oauth2
    authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:pets': modify pets in your account
      'read:pets': read your pets
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  User:
    type: object
    properties:
      userId:
        type: integer
        format: string
      username:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      deleted:
        type: boolean
        description: 유저가 탈퇴했는지 여부
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
  Team:
    type: object
    description: 팀이 프로젝트를 뜻한다
    properties:
      teamId:
        type: string
      teamName:
        type: string
      createTime:
        type: string
        format: date-time
      leaderId:
        type: string
      description:
        type: string
        description: 팀에 대한 설명
      deleted:
        type: boolean
        description: 팀이 해체되었는지 여부
        
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
